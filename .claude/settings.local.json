{
  "permissions": {
    "allow": [
      "Bash(exiftool:*)",
      "Bash(git commit:*)",
      "Bash(/opt/miniconda3/bin/pip list)",
      "Bash(curl -s http://127.0.0.1:5000/health)",
      "Bash(python3:*)",
      "Bash(curl -s http://127.0.0.1:5156/health)",
      "Read(//opt/homebrew/Cellar/exiftool/13.10/bin/**)",
      "Bash(curl:*)",
      "Bash(unzip:*)",
      "Bash(git add:*)",
      "Bash(pip3 install:*)",
      "Bash(git log:*)",
      "Bash(chmod:*)",
      "Bash(./cleanup_for_release.sh:*)",
      "Bash(pip3 list:*)",
      "Bash(pyinstaller:*)",
      "Bash(tee:*)",
      "Bash(open:*)",
      "Bash(./create_distribution.sh:*)",
      "Bash(sqlite3:*)",
      "Bash(ls:*)",
      "Bash(./create_pkg.sh:*)",
      "Bash(pkgutil:*)",
      "Bash(sudo rm:*)",
      "Bash(osascript:*)",
      "WebSearch",
      "WebFetch(domain:documenter.getpostman.com)",
      "Bash(./create_dmg.sh:*)",
      "Bash(hdiutil verify:*)",
      "Read(//Volumes/**)",
      "Bash(ln:*)",
      "Bash(hdiutil create:*)",
      "Bash(security find-identity:*)",
      "Bash(./sign_and_notarize.sh:*)",
      "Bash(xcrun notarytool history:*)",
      "Bash(xcrun notarytool store-credentials:*)",
      "Bash(xcrun notarytool info:*)",
      "Bash(xcrun notarytool wait:*)",
      "Read(//tmp/**)",
      "Bash(pkill:*)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git merge feature/gui-api-control -m \"$(cat <<''EOF''\nrelease: 合并 v1.0.0 发布分支\n\n合并 feature/gui-api-control 分支到 master\n包含慧眼识鸟 v1.0.0 所有功能和改进\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(xcrun stapler staple:*)",
      "Bash(xcrun stapler validate:*)",
      "Bash(spctl:*)",
      "Bash(xcrun notarytool submit:*)",
      "Bash(while true)",
      "Bash(do sleep:*)",
      "Bash(done)",
      "Bash(lipo:*)",
      "Read(//Applications/**)",
      "Bash(sudo pkgutil:*)",
      "Bash(installer:*)",
      "Read(///**)",
      "Bash(xattr:*)",
      "Bash(codesign:*)",
      "Bash(pkgbuild:*)",
      "Bash(mdfind:*)",
      "Bash(while read f)",
      "Bash(do if [ -e \"/Applications/$f\" ])",
      "Bash(then echo \"✓ 找到: /Applications/$f\")",
      "Bash(else echo \"✗ 缺失: /Applications/$f\")",
      "Bash(fi)",
      "Bash(./create_dmg_cn.sh:*)",
      "Bash(git pull:*)"
    ],
    "deny": [],
    "ask": []
  }
}
